// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  avatar    String?
  role      Role     @default(USER)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  posts            Post[]
  comments         Comment[]
  events           Event[]
  eventRegistrations EventRegistration[]

  @@map("users")
}

model Post {
  id            String      @id @default(uuid())
  title         String
  excerpt       String      @db.Text
  content       String      @db.LongText
  cover         String?
  category      PostCategory
  views         Int         @default(0)
  likes         Int         @default(0)
  featured      Boolean     @default(false)
  status        PostStatus  @default(DRAFT)
  tags          String      @db.Text // JSON array stored as text
  commentsCount Int         @default(0)
  publishedAt   DateTime?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  // Relations
  author    User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String
  comments  Comment[]

  @@map("posts")
}

model Event {
  id                   String        @id @default(uuid())
  name                 String
  description          String        @db.Text
  content              String        @db.LongText
  date                 DateTime
  location             String
  image                String?
  maxParticipants      Int
  currentParticipants  Int           @default(0)
  category             EventCategory
  status               EventStatus   @default(UPCOMING)
  distance             String?
  registrationFee      Int?          @default(0)
  requirements         String?       @db.Text
  published            Boolean       @default(true)
  featured             Boolean       @default(false)
  registrationDeadline DateTime?
  organizer            String?
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt

  // Relations
  author       User                @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId     String
  registrations EventRegistration[]

  @@map("events")
}

model EventRegistration {
  id                String             @id @default(uuid())
  fullName          String
  email             String
  phone             String
  emergencyContact  String
  emergencyPhone    String?
  medicalConditions String?            @db.Text
  experience        ExperienceLevel
  status            RegistrationStatus @default(PENDING)
  registeredAt      DateTime           @default(now())
  updatedAt         DateTime           @updatedAt

  // Relations
  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String

  @@unique([eventId, userId])
  @@map("event_registrations")
}

model Product {
  id            String          @id @default(uuid())
  name          String
  description   String          @db.Text
  price         Int
  originalPrice Int?
  images        String          @db.Text // JSON array stored as text
  category      ProductCategory
  inStock       Boolean         @default(true)
  stock         Int             @default(0)
  featured      Boolean         @default(false)
  rating        Float           @default(0.0)
  reviews       Int             @default(0)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  @@map("products")
}

model Comment {
  id        String        @id @default(uuid())
  content   String        @db.Text
  status    CommentStatus @default(PENDING)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  // Relations
  post     Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId   String
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String

  // Self-referential for replies
  parent   Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  parentId String?
  replies  Comment[] @relation("CommentReplies")

  @@map("comments")
}

// Enums
enum Role {
  USER
  EDITOR
  ADMIN
}

enum PostCategory {
  TRAINING
  NUTRITION
  EVENTS
  TIPS
}

enum PostStatus {
  DRAFT
  PUBLISHED
}

enum EventCategory {
  MARATHON
  HALF_MARATHON
  FIVE_K
  TEN_K
  FUN_RUN
  TRAIL_RUN
  NIGHT_RUN
}

enum EventStatus {
  UPCOMING
  ONGOING
  COMPLETED
  CANCELLED
}

enum ExperienceLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum RegistrationStatus {
  PENDING
  CONFIRMED
  WAITLIST
  CANCELLED
}

enum ProductCategory {
  APPAREL
  ACCESSORIES
  NUTRITION
  EQUIPMENT
}

enum CommentStatus {
  PENDING
  APPROVED
  REJECTED
}
